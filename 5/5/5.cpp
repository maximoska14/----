#include <iostream>
#include <string>
#include <vector>

using namespace std;

// Базовый класс Животные
class Животные {
protected:
    string название;
    string типОбитания;
    string типПитания;
    static int количествоТравоядных;

public:

    Животные(const string& название, const string& типОбитания, const string& типПитания) :
        название(название), типОбитания(типОбитания), типПитания(типПитания) {
        if (типПитания == "травоядный") {
            количествоТравоядных++;
        }
    }

    // Функция для получения информации
    virtual void getInfo() const {
        cout << "Название: " << название << endl;
        cout << "Тип обитания: " << типОбитания << endl;
        cout << "Тип питания: " << типПитания << endl;
    }

    static int getКоличествоТравоядных() {
        return количествоТравоядных;
    }

    virtual ~Животные() {}
};


int Животные::количествоТравоядных = 0;


class Млекопитающие : public Животные {
private:
    int количествоДетёнышей;
    static int общееКоличествоДетёнышей;
    static int количествоМлекопитающих;

public:
  
    Млекопитающие(const string& название, const string& типОбитания, const string& типПитания, int количествоДетёнышей) :
        Животные(название, типОбитания, типПитания), количествоДетёнышей(количествоДетёнышей) {
        общееКоличествоДетёнышей += количествоДетёнышей;
        количествоМлекопитающих++;
    }

    void getInfo() const override {
        Животные::getInfo();
        cout << "Количество детёнышей: " << количествоДетёнышей << endl;
    }

    static double getСреднееКоличествоДетёнышей() {
        if (количествоМлекопитающих == 0) {
            return 0.0; 
        }
        return static_cast<double>(общееКоличествоДетёнышей) / количествоМлекопитающих;
    }

    ~Млекопитающие() override {}

private:
    static inline int staticInit() {
        общееКоличествоДетёнышей = 0;
        количествоМлекопитающих = 0;
        return 0;
    }
    static int sInit;
};

int Млекопитающие::общееКоличествоДетёнышей;
int Млекопитающие::количествоМлекопитающих;
int Млекопитающие::sInit = Млекопитающие::staticInit();


class Птицы : public Животные {
private:
    string времяБодрствования;

public:

    Птицы(const string& название, const string& типОбитания, const string& типПитания, const string& времяБодрствования) :
        Животные(название, типОбитания, типПитания), времяБодрствования(времяБодрствования) {
    }

    void getInfo() const override {
        Животные::getInfo();
        cout << "Время бодрствования: " << времяБодрствования << endl;
    }

    ~Птицы() override {}
};

int main() {
    Животные животное1("Волк", "Лес", "Хищник");
    Животные животное2("Олень", "Лес", "Травоядный");
    Млекопитающие млекопитающее1("Лев", "Саванна", "Хищник", 3);
    Млекопитающие млекопитающее2("Корова", "Ферма", "Травоядный", 1);
    Птицы птица1("Сова", "Лес", "Хищник", "Ночное");
    Птицы птица2("Воробей", "Город", "Всеядный", "Дневное");

    
    cout << "Информация о животных:" << endl;
    животное1.getInfo();
    cout << endl;

    животное2.getInfo();
    cout << endl;

    млекопитающее1.getInfo();
    cout << endl;

    млекопитающее2.getInfo();
    cout << endl;

    птица1.getInfo();
    cout << endl;

    птица2.getInfo();
    cout << endl;

    
    cout << "Количество травоядных: " << Животные::getКоличествоТравоядных() << endl;

    cout << "Среднее количество детёнышей у млекопитающих: " << Млекопитающие::getСреднееКоличествоДетёнышей() << endl;

    return 0;
}